//* Approach to solve a sql problem

// Step 1: Decide on input and output parameters
// Step 2: Understand and Explain the Approach
// Step 3: Construct the Query Step by Step
// Step 4: Improve Final Result

// Problem Statement (Example):
// "Find the total revenue generated by each customer in a hypothetical 'sales' table.
// The table has the following columns:
// - customer_id (integer): Unique identifier for the customer.
// - product_id (integer): Identifier for the purchased product.
// - quantity (integer): Number of units purchased.
// - price_per_unit (decimal): Price for one unit of the product."

/**
 * Step 1: Understand and Explain the Approach
 *
 * - We need to calculate the total revenue for each customer.
 * - Revenue for a single transaction is calculated as: quantity * price_per_unit.
 * - For each customer, we need to sum the revenue across all their transactions.
 * - The final output should include customer_id and their total revenue.
 */

/**
 * Step 2: Construct the Query Step by Step
 */
// Basic SELECT query to fetch data from the table:
const basicQuery = `
SELECT 
    customer_id, 
    quantity, 
    price_per_unit 
FROM sales;
`;

// Add a calculated column for revenue:
const revenueCalculationQuery = `
SELECT 
    customer_id, 
    quantity * price_per_unit AS revenue 
FROM sales;
`;

// Group by customer_id and calculate total revenue:
const groupedQuery = `
SELECT 
    customer_id, 
    SUM(quantity * price_per_unit) AS total_revenue 
FROM sales
GROUP BY customer_id;
`;

/**
 * Step 3: Improve Final Result
 *
 * - Add sorting by total_revenue in descending order to highlight top spenders.
 * - Use proper column aliases for readability.
 * - Ensure the query handles edge cases like null values or zero quantity/price.
 */
const finalQuery = `
SELECT 
    customer_id, 
    SUM(quantity * price_per_unit) AS total_revenue 
FROM sales
WHERE quantity > 0 AND price_per_unit > 0
GROUP BY customer_id
ORDER BY total_revenue DESC;
`;

/**
 * Practice Platform:
 * You can use this query on the StrataScratch platform (https://www.stratascratch.com)
 * or any SQL environment with a similar dataset to practice and verify the result.
 */
