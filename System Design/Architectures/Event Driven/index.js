// Event-Driven Architecture
/*
Event-Driven Architecture is a design pattern where systems communicate and react to events or changes in state. 
Events are generated by producers and consumed by consumers, which act based on the event data. 
This architecture is useful for building scalable and responsive systems, as it allows for decoupling between components and supports asynchronous processing. 
Commonly used in real-time applications and microservices.

Detailed Points:
- Events: Systems react to changes in state or messages indicating that something has happened.
- Producers and Consumers: Producers generate events, and consumers react to them.
- Asynchronous: Processing happens asynchronously, allowing for decoupling between components.
- Scalability: Supports scalable and flexible systems by decoupling event producers from consumers.
- Examples: Real-time notifications, messaging systems, event-driven microservices.
*/

// Example:
// Node.js example using EventEmitter
const EventEmitter = require("events");
const eventEmitter = new EventEmitter();

// Listener for 'message' event
eventEmitter.on("message", (data) => {
  console.log("New message:", data);
});

// Emit 'message' event
eventEmitter.emit("message", "Hello, World!");
